import*as n from"npm:idbx";var g=class{db;storeName;pageSize;#e=null;get pageNumber(){return this.#e===null?1:this.#e}totalPages;list;constructor(e,t,a=10){this.db=e,this.storeName=t,this.pageSize=a??10,this.totalPages=0,this.list=[]}async setPageSize(e,t=1){if(e<1)throw new Error("pageSize must be greater than 0");this.pageSize=e,await this.go(t)}async calculateLastPageNumber(){let e=await this.count();return this.totalPages=Math.ceil(e/this.pageSize),this.totalPages}async calculatePageNumber(e,t={}){let a=t.noCheck===void 0?!1:t.noCheck,r=t.circularPaging===void 0?!1:t.circularPaging;if(this.#e=parseInt(e.toString(),10)??this.pageNumber,!a||r){let s=await this.calculateLastPageNumber();if(this.pageNumber<1)if(r){let i=Math.abs(this.pageNumber)%s;this.#e=i>=0?s-i:1}else this.#e=1;else if(this.pageNumber>s)if(r){let i=this.pageNumber%s;this.#e=i>0?i:s}else this.#e=s}}async go(e,t={noCheck:!1,circularPaging:!1}){await this.calculatePageNumber(e,t);let a=(this.pageNumber-1)*this.pageSize,r=!0;return this.list=await new Promise(s=>{let i=[],u=n.getStore(this.db,this.storeName);n.cursorHandler(u,o=>{if(r&&a>0)r=!1,o.advance(a);else{if(this.pageSize>=i.length&&i.push(o.value),this.pageSize===i.length)return!0;o.continue()}},()=>s(i))}),this.list}next(e=1,t=!1){let a=this.pageNumber+Math.abs(e);return this.go(a,{circularPaging:t})}prev(e=1,t=!1){let a=this.pageNumber-Math.abs(e);return this.go(a,{circularPaging:t})}first(){return this.go(1)}async last(){let e=this.totalPages===0?await this.calculateLastPageNumber():this.totalPages;return this.go(e,{noCheck:!0})}count(){let a=this.db.transaction([this.storeName],"readonly").objectStore(this.storeName).count();return new Promise((r,s)=>{a.onsuccess=()=>{r(a.result)},a.onerror=()=>{s("Error retrieving data from IndexedDB")}})}};export{g as IDBPaging};
//# sourceMappingURL=idbpaging.js.map
