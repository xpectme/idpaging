import*as g from"npm:idbx";var r=Symbol("pageNumber"),o=class{db;storeName;pageSize;[r]=null;get pageNumber(){return this[r]===null?1:this[r]}totalPages;list;constructor(t,e,a=10){this.db=t,this.storeName=e,this.pageSize=a??10,this.totalPages=0,this.list=[]}async setPageSize(t,e=1){if(t<1)throw new Error("pageSize must be greater than 0");let a=typeof e=="number"?e:e.startPage??1;e=typeof e=="number"?{}:e,this.pageSize=t,await this.go(a,e)}async calculateLastPageNumber(t){let e=await this.count(t);return this.totalPages=Math.ceil(e/this.pageSize),this.totalPages}async calculatePageNumber(t,e={}){let a=e.noCheck===void 0?!1:e.noCheck,i=e.circularPaging===void 0?!1:e.circularPaging;if(this[r]=parseInt(t.toString(),10)??this.pageNumber,!a||i){let s=await this.calculateLastPageNumber(e);if(this.pageNumber<1)if(i){let n=Math.abs(this.pageNumber)%s;this[r]=n>=0?s-n:1}else this[r]=1;else if(this.pageNumber>s)if(i){let n=this.pageNumber%s;this[r]=n>0?n:s}else this[r]=s}}async go(t,e={noCheck:!1,circularPaging:!1}){await this.calculatePageNumber(t,e);let a=(this.pageNumber-1)*this.pageSize,i=!0;return this.list=await new Promise(s=>{let n=[],l=g.getStore(this.db,this.storeName),c=e?.indexName!==void 0?l.index(e.indexName):null;l=c!==null?c:l,g.cursorHandler(l,u=>{if(i&&a>0)i=!1,u.advance(a);else{if(this.pageSize>=n.length&&(!e?.indexKey||u.key===e?.indexKey)&&n.push(u.value),this.pageSize===n.length)return!0;u.continue()}},()=>s(n))}),this.list}next(t=1,e=!1){typeof e=="boolean"&&(e={circularPaging:e});let a=this.pageNumber+Math.abs(t);return this.go(a,e)}prev(t=1,e=!1){typeof e=="boolean"&&(e={circularPaging:e});let a=this.pageNumber-Math.abs(t);return this.go(a,e)}first(t){return this.go(1,t)}async last(t){let e=this.totalPages===0?await this.calculateLastPageNumber(t):this.totalPages;return this.go(e,{...t,noCheck:!0})}count(t){let e=g.getStore(this.db,this.storeName),a=t?.indexName!==void 0?e.index(t.indexName):null;e=a!==null?a:e;let i=e.count(t?.indexKey);return new Promise((s,n)=>{i.onsuccess=()=>{s(i.result)},i.onerror=()=>{n("Error retrieving data from IndexedDB")}})}};export{o as IDBPaging};
//# sourceMappingURL=idbpaging.js.map
