{
  "version": 3,
  "sources": ["../lib/IDBPaging.ts"],
  "sourcesContent": ["import * as idbx from \"npm:idbx\";\n\nexport interface IDBPagingCalculatePageNumberOptions {\n  noCheck?: boolean;\n  circularPaging?: boolean;\n}\n\nexport class IDBPaging<T> {\n  db: IDBDatabase;\n  storeName: string;\n  pageSize: number;\n  #pageNumber: number | null = null;\n  get pageNumber() {\n    return this.#pageNumber === null ? 1 : this.#pageNumber;\n  }\n  totalPages: number;\n  list: T[];\n\n  constructor(\n    db: IDBDatabase,\n    storeName: string,\n    pageSize = 10,\n  ) {\n    this.db = db;\n    this.storeName = storeName;\n    this.pageSize = pageSize ?? 10;\n    this.totalPages = 0;\n    this.list = [];\n  }\n\n  async setPageSize(pageSize: number, startPageNumber = 1) {\n    if (pageSize < 1) {\n      throw new Error(\"pageSize must be greater than 0\");\n    }\n    this.pageSize = pageSize;\n    await this.go(startPageNumber);\n  }\n\n  async calculateLastPageNumber() {\n    const count = await this.count();\n    this.totalPages = Math.ceil(count / this.pageSize);\n    return this.totalPages;\n  }\n\n  async calculatePageNumber(\n    pageNumber: number | string,\n    options: IDBPagingCalculatePageNumberOptions = {},\n  ): Promise<void> {\n    const noCheck = options.noCheck === undefined ? false : options.noCheck;\n    const circularPaging = options.circularPaging === undefined\n      ? false\n      : options.circularPaging;\n\n    this.#pageNumber = parseInt(pageNumber.toString(), 10) ?? this.pageNumber;\n    if (!noCheck || circularPaging) {\n      const lastPageNumber = await this.calculateLastPageNumber();\n      if (this.pageNumber < 1) {\n        if (circularPaging) {\n          const flipPages = Math.abs(this.pageNumber) % lastPageNumber;\n          this.#pageNumber = flipPages >= 0 ? lastPageNumber - flipPages : 1;\n        } else {\n          this.#pageNumber = 1;\n        }\n      } else {\n        if (this.pageNumber > lastPageNumber) {\n          if (circularPaging) {\n            const flipPages = this.pageNumber % lastPageNumber;\n            this.#pageNumber = flipPages > 0 ? flipPages : lastPageNumber;\n          } else {\n            this.#pageNumber = lastPageNumber;\n          }\n        }\n      }\n    }\n  }\n\n  async go(pageNumber: number, options: IDBPagingCalculatePageNumberOptions = {\n    noCheck: false,\n    circularPaging: false,\n  }): Promise<T[]> {\n    await this.calculatePageNumber(pageNumber, options);\n    const offset = (this.pageNumber - 1) * this.pageSize;\n    let advancing = true;\n\n    this.list = await new Promise((resolve) => {\n      const list: T[] = [];\n      const store = idbx.getStore(this.db, this.storeName);\n      idbx.cursorHandler(store, (cursor) => {\n        if (advancing && offset > 0) {\n          advancing = false;\n          cursor.advance(offset);\n        } else {\n          if (this.pageSize >= list.length) {\n            list.push(cursor.value);\n          }\n          if (this.pageSize === list.length) {\n            // early exit\n            return true;\n          } else {\n            cursor.continue();\n          }\n        }\n      }, () => resolve(list));\n    });\n\n    return this.list;\n  }\n\n  next(pages = 1, circularPaging = false) {\n    const pageNumber = this.pageNumber + Math.abs(pages);\n    return this.go(pageNumber, { circularPaging });\n  }\n\n  prev(pages = 1, circularPaging = false) {\n    const pageNumber = this.pageNumber - Math.abs(pages);\n    return this.go(pageNumber, { circularPaging });\n  }\n\n  first() {\n    return this.go(1);\n  }\n\n  async last() {\n    const lastPageNumber = this.totalPages === 0\n      ? await this.calculateLastPageNumber()\n      : this.totalPages;\n\n    // noCheck is true because we already know the last page number\n    return this.go(lastPageNumber, { noCheck: true });\n  }\n\n  count() {\n    const transaction = this.db.transaction([this.storeName], \"readonly\");\n    const objectStore = transaction.objectStore(this.storeName);\n    const req = objectStore.count();\n    return new Promise<number>((resolve, reject) => {\n      req.onsuccess = () => {\n        resolve(req.result);\n      };\n      req.onerror = () => {\n        reject(\"Error retrieving data from IndexedDB\");\n      };\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["idbx", "IDBPaging", "#pageNumber", "db", "storeName", "pageSize", "startPageNumber", "count", "pageNumber", "options", "noCheck", "circularPaging", "lastPageNumber", "flipPages", "offset", "advancing", "resolve", "list", "store", "cursor", "pages", "req", "reject"]
}
